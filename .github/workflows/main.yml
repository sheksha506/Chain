name: Fullstack CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend

      # Optional BuildKit & caching (uncomment if you want to use it)
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Login to DockerHub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Docker build and push with cache
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./frontend
      #     push: true
      #     tags: sekshavali922/frontend
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: Docker build and push (with retry)
        run: |
          for i in 1 2 3; do
            docker build -t sekshavali922/frontend ./frontend && break || sleep 15
          done
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push sekshavali922/frontend

  build-user-service:
    name: Build User Service
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: users
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install
        working-directory: ./backend_userService

      - name: Docker build and push (with retry)
        run: |
          for i in 1 2 3; do
            docker build -t sekshavali922/user-service ./backend_userService && break || sleep 15
          done
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push sekshavali922/user-service

  build-message-service:
    name: Build Message Service
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:5
        ports:
          - 27017:27017
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: localhost:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install
        working-directory: ./backend_messageService/message

      - name: Docker build and push (with retry)
        run: |
          for i in 1 2 3; do
            docker build -t sekshavali922/message-service ./backend_messageService && break || sleep 15
          done
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push sekshavali922/message-service
